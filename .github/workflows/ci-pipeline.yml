name: CI/CD Pipeline (Monorepo)

on:
  push:
    branches: [ main, argo]
  pull_request:
    branches: [ main ]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_NAME: myapp

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for better git operations
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        pip install flake8
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run unit tests with coverage
      run: |
        pip install pytest pytest-cov
        pytest tests/ -v --cov=src --cov-report=term-missing
    
    - name: Security scan - Code
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
    
    - name: Generate image tag
      id: meta
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        IMAGE_TAG="${SHORT_SHA}-${TIMESTAMP}"
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        echo "FULL_IMAGE=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}" >> $GITHUB_ENV
    
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.FULL_IMAGE }} .
        docker tag ${{ env.FULL_IMAGE }} ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
    
    - name: Security scan - Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.FULL_IMAGE }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
    
    - name: Push image to ACR
      if: github.ref == 'refs/heads/main'
      run: |
        docker push ${{ env.FULL_IMAGE }}
        docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
        echo "âœ… Pushed: ${{ env.FULL_IMAGE }}"
    
    - name: Update Kubernetes manifest
      if: github.ref == 'refs/heads/main'
      run: |
        # Update the deployment manifest
        sed -i "s|image: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.FULL_IMAGE }}|" k8s/deployment.yaml
        
        echo "Updated k8s/deployment.yaml with new image:"
        cat k8s/deployment.yaml | grep "image:"
    
    - name: Commit and push manifest changes
      if: github.ref == 'refs/heads/main'
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
        git add k8s/deployment.yaml
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ðŸš€ Update image to ${{ env.IMAGE_TAG }}"
          git push origin main
          echo "âœ… Manifest updated! ArgoCD will pick up the changes."
        fi